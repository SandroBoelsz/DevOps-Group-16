name: Deploy to EKS

on:
  push:
    branches:
      - main
      - feature/argo-docs-and-env-variables

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: lifewatch
  IMAGE_TAG: latest
  ARGO_WORKFLOWS_VERSION: v3.6.4

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image 
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./workflow-data-replication-api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update kube config
      run: aws eks update-kubeconfig --name lifewatch-cluster --region ${{ env.AWS_REGION }}

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
        UVA_MINIO_API: ${{ vars.UVA_MINIO_API }}
        SPAIN_MINIO_API: ${{ vars.SPAIN_MINIO_API }}
        MINIO_REGION: ${{ vars.MINIO_REGION }}
        MINIO_ACCESS_KEY_ID: ${{ secrets.MINIO_ACCESS_KEY_ID }}
        MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      run: |
        sed -i "s|\${UVA_MINIO_API}|$UVA_MINIO_API|g" manifests/lifewatch-deployment.yaml
        sed -i "s|\${SPAIN_MINIO_API}|$SPAIN_MINIO_API|g" manifests/lifewatch-deployment.yaml
        sed -i "s|\${MINIO_REGION}|$MINIO_REGION|g" manifests/lifewatch-deployment.yaml
        sed -i "s|\${MINIO_ACCESS_KEY_ID}|$MINIO_ACCESS_KEY_ID|g" manifests/lifewatch-deployment.yaml
        sed -i "s|\${MINIO_ACCESS_KEY}|$MINIO_ACCESS_KEY|g" manifests/lifewatch-deployment.yaml

        kubectl apply -f manifests/lifewatch-deployment.yaml
        kubectl apply -f manifests/lifewatch-service.yaml

    - name: Deploy Argo Workflows to EKS
      run: |
        kubectl delete svc argo-server-external -n argo || true
        kubectl create namespace argo || true
        kubectl apply -n argo -f "https://github.com/argoproj/argo-workflows/releases/download/${{ env.ARGO_WORKFLOWS_VERSION }}/quick-start-minimal.yaml"
        kubectl expose deployment argo-server --type=LoadBalancer --name=argo-server-external -n argo
